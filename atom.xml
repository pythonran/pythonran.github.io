<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小楼一夜醉酒</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-26T07:09:01.062Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ran Binkesi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>shell 编程</title>
    <link href="http://yoursite.com/2020/08/26/shell%20%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/08/26/shell%20%E7%BC%96%E7%A8%8B/</id>
    <published>2020-08-26T07:09:01.061Z</published>
    <updated>2020-08-26T07:09:01.062Z</updated>
    
    <content type="html"><![CDATA[<h4><span id="参数传递">参数传递</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$#: 参数个数</span><br><span class="line">$1: 第一个参数，2,3,4类比</span><br><span class="line">$?: 显示最后命令的退出状态，0表示没有错误</span><br><span class="line">$$: 当前进程id</span><br><span class="line">$*: 显示所有接收到的参数，与 $@ 作用一样, 不同点 前者把多各参数合并成了一个，后者不会</span><br><span class="line"></span><br><span class="line">$!：显示最后一个后台进程id</span><br></pre></td></tr></table></figure><a id="more"></a><h4><span id="括号-的作用">括号()、(())、[]、[[]]、{} 的作用</span></h4><h5><span id="小括号圆括号">小括号，圆括号（）</span></h5><ol><li>单小括号 ()</li></ol><ul><li>①命令组。括号中的命令将会新开一个子shell顺序执行，所以括号中的变量不能够被脚本余下的部分使用。括号中多个命令之间用分号隔开，最后一个命令可以没有分号，各命令和括号之间不必有空格。</li><li>②命令替换。等同于<code>cmd</code>，shell扫描一遍命令行，发现了$(cmd)结构，便将$(cmd)中的cmd执行一次，得到其标准输出，再将此输出放到原来命令。有些shell不支持，如tcsh。</li><li>③用于初始化数组。如：array=(a b c d)</li></ul><ol start="2"><li>双小括号 (( ))</li></ol><ul><li>①整数扩展。这种扩展计算是整数型的计算，不支持浮点型。((exp))结构扩展并计算一个算术表达式的值，如果表达式的结果为0，那么返回的退出状态码为1，或者 是”假”，而一个非零值的表达式所返回的退出状态码将为0，或者是”true”。若是逻辑判断，表达式exp为真则为1,假则为0。</li><li>②只要括号中的运算符、表达式符合C语言运算规则，都可用在$((exp))中，甚至是三目运算符。作不同进位(如二进制、八进制、十六进制)运算时，输出结果全都自动转化成了十进制。如：echo $((16#5f)) 结果为95 (16进位转十进制)</li><li>③单纯用 (( )) 也可重定义变量值，比如 a=5; ((a++)) 可将 $a 重定义为6</li><li>④常用于算术运算比较，双括号中的变量可以不使用$符号前缀。括号内支持多个表达式用逗号分开。 只要括号中的表达式符合C语言运算规则,比如可以直接使用for((i=0;i&lt;5;i++)), 如果不使用双括号, 则为for i in <code>seq 0 4</code>或者for i in {0..4}。再如可以直接使用if (($i&lt;5)), 如果不使用双括号, 则为if [ $i -lt 5 ]。<h5><span id="中括号方括号">中括号，方括号[]</span></h5></li></ul><ol><li>单中括号 []</li></ol><ul><li>①bash 的内部命令，[和test是等同的。如果我们不用绝对路径指明，通常我们用的都是bash自带的命令。if/test结构中的左中括号是调用test的命令标识，右中括号是关闭条件判断的。这个命令把它的参数作为比较表达式或者作为文件测试，并且根据比较的结果来返回一个退出状态码。if/test结构中并不是必须右中括号，但是新版的Bash中要求必须这样。</li><li>②Test和[]中可用的比较运算符只有==和!=，两者都是用于字符串比较的，不可用于整数比较，整数比较只能使用-eq，-gt这种形式。无论是字符串比较还是整数比较都不支持大于号小于号。如果实在想用，对于字符串比较可以使用转义形式，如果比较”ab”和”bc”：[ ab &lt; bc ]，结果为真，也就是返回状态为0。[ ]中的逻辑与和逻辑或使用-a 和-o 表示。</li><li>③字符范围。用作正则表达式的一部分，描述一个匹配的字符范围。作为test用途的中括号内不能使用正则。</li><li>④在一个array 结构的上下文中，中括号用来引用数组中每个元素的编号。</li></ul><ol start="2"><li>双中括号[[ ]]</li></ol><ul><li>①[[是 bash 程序语言的关键字。并不是一个命令，[[ ]] 结构比[ ]结构更加通用。在[[和]]之间所有的字符都不会发生文件名扩展或者单词分割，但是会发生参数扩展和命令替换。</li><li>②支持字符串的模式匹配，使用=~操作符时甚至支持shell的正则表达式。字符串比较时可以把右边的作为一个模式，而不仅仅是一个字符串，比如[[ hello == hell? ]]，结果为真。[[ ]] 中匹配字符串或通配符，不需要引号。</li><li>③使用[[ … ]]条件判断结构，而不是[ … ]，能够防止脚本中的许多逻辑错误。比如，&amp;&amp;、||、&lt;和&gt; 操作符能够正常存在于[[ ]]条件判断结构中，但是如果出现在[ ]结构中的话，会报错。比如可以直接使用if [[ $a != 1 &amp;&amp; $a != 2 ]], 如果不适用双括号, 则为if [ $a -ne 1] &amp;&amp; [ $a != 2 ]或者if [ $a -ne 1 -a $a != 2 ]。</li><li>④bash把双中括号中的表达式看作一个单独的元素，并返回一个退出状态码。<br>例子：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if ($i&lt;5)  </span><br><span class="line">if [ $i -lt 5 ]  </span><br><span class="line">if [ $a -ne 1 -a $a !&#x3D; 2 ]  </span><br><span class="line">if [ $a -ne 1] &amp;&amp; [ $a !&#x3D; 2 ]  </span><br><span class="line">if [[ $a !&#x3D; 1 &amp;&amp; $a !&#x3D; 2 ]]  </span><br><span class="line">   </span><br><span class="line">for i in $(seq 0 4);do echo $i;done  </span><br><span class="line">for i in &#96;seq 0 4&#96;;do echo $i;done  </span><br><span class="line">for ((i&#x3D;0;i&lt;5;i++));do echo $i;done  </span><br><span class="line">for i in &#123;0..4&#125;;do echo $i;done</span><br></pre></td></tr></table></figure><h5><span id="大括号-花括号">大括号、花括号 {}</span></h5><ol><li>常规用法</li></ol><ul><li>①大括号拓展。(通配(globbing))将对大括号中的文件名做扩展。在大括号中，不允许有空白，除非这个空白被引用或转义。第一种：对大括号中的以逗号分割的文件列表进行拓展。如 touch {a,b}.txt 结果为a.txt b.txt。第二种：对大括号中以点点（..）分割的顺序文件列表起拓展作用，如：touch {a..d}.txt 结果为a.txt b.txt c.txt d.txt</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># ls &#123;ex1,ex2&#125;.sh  </span><br><span class="line">ex1.sh  ex2.sh  </span><br><span class="line"># ls &#123;ex&#123;1..3&#125;,ex4&#125;.sh  </span><br><span class="line">ex1.sh  ex2.sh  ex3.sh  ex4.sh  </span><br><span class="line"># ls &#123;ex[1-3],ex4&#125;.sh  </span><br><span class="line">ex1.sh  ex2.sh  ex3.sh  ex4.sh</span><br></pre></td></tr></table></figure><ul><li>②代码块，又被称为内部组，这个结构事实上创建了一个匿名函数 。与小括号中的命令不同，大括号内的命令不会新开一个子shell运行，即脚本余下部分仍可使用括号内变量。括号内的命令间用分号隔开，最后一个也必须有分号。{}的第一个命令和左括号之间必须要有一个空格。</li></ul><ol start="2"><li>几种特殊的替换结构</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;var:-string&#125;,$&#123;var:+string&#125;,$&#123;var:&#x3D;string&#125;,$&#123;var:?string&#125;</span><br></pre></td></tr></table></figure><ul><li>①${var:-string}和${var:=string}:若变量var为空，则用在命令行中用string来替换${var:-string}，否则变量var不为空时，则用变量var的值来替换${var:-string}；对于${var:=string}的替换规则和${var:-string}是一样的，所不同之处是${var:=string}若var为空时，用string替换${var:=string}的同时，把string赋给变量var： ${var:=string}很常用的一种用法是，判断某个变量是否赋值，没有的话则给它赋上一个默认值。</li><li>② ${var:+string}的替换规则和上面的相反，即只有当var不是空的时候才替换成string，若var为空时则不替换或者说是替换成变量 var的值，即空值。(因为变量var此时为空，所以这两种说法是等价的) </li><li>③${var:?string}替换规则为：若变量var不为空，则用变量var的值来替换${var:?string}；若变量var为空，则把string输出到标准错误中，并从脚本中退出。我们可利用此特性来检查是否设置了变量的值。</li><li>补充扩展：在上面这五种替换结构中string不一定是常值的，可用另外一个变量的值或是一种命令的输出。</li></ul><ol start="3"><li>四种模式匹配替换结构</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">模式匹配记忆方法：</span><br><span class="line"># 是去掉左边(在键盘上#在$之左边)</span><br><span class="line">% 是去掉右边(在键盘上%在$之右边)</span><br><span class="line">#和%中的单一符号是最小匹配，两个相同符号是最大匹配。</span><br><span class="line"></span><br><span class="line">$&#123;var%pattern&#125;,$&#123;var%%pattern&#125;,$&#123;var#pattern&#125;,$&#123;var##pattern&#125;</span><br></pre></td></tr></table></figure><ul><li>第一种模式：${variable%pattern}，这种模式时，shell在variable中查找，看它是否一给的模式pattern结尾，如果是，就从命令行把variable中的内容去掉右边最短的匹配模式</li><li>第二种模式： ${variable%%pattern}，这种模式时，shell在variable中查找，看它是否一给的模式pattern结尾，如果是，就从命令行把variable中的内容去掉右边最长的匹配模式</li><li>第三种模式：${variable#pattern} 这种模式时，shell在variable中查找，看它是否一给的模式pattern开始，如果是，就从命令行把variable中的内容去掉左边最短的匹配模式</li><li>第四种模式： ${variable##pattern} 这种模式时，shell在variable中查找，看它是否一给的模式pattern结尾，如果是，就从命令行把variable中的内容去掉右边最长的匹配模式</li><li>这四种模式中都不会改变variable的值，其中，只有在pattern中使用了<em>匹配符号时，%和%%，#和##才有区别。结构中的pattern支持通配符，</em>表示零个或多个任意字符，?表示仅与一个任意字符匹配，[…]表示匹配中括号里面的字符，[!…]表示不匹配中括号里面的字符。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># var&#x3D;testcase  </span><br><span class="line"># echo $var  </span><br><span class="line">testcase  </span><br><span class="line"># echo $&#123;var%s*e&#125; </span><br><span class="line">testca  </span><br><span class="line"># echo $var  </span><br><span class="line">testcase </span><br><span class="line"># echo $&#123;var%%s*e&#125; </span><br><span class="line">te</span><br><span class="line"># echo $&#123;var#?e&#125;  </span><br><span class="line">stcase</span><br><span class="line"># echo $&#123;var##?e&#125;  </span><br><span class="line">stcase</span><br><span class="line"># echo $&#123;var##*e&#125;  </span><br><span class="line"> </span><br><span class="line"># echo $&#123;var##*s&#125;  </span><br><span class="line">e  </span><br><span class="line"># echo $&#123;var##test&#125;  </span><br><span class="line">case</span><br></pre></td></tr></table></figure><ol start="4"><li>字符串提取和替换</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;var:num&#125;,$&#123;var:num1:num2&#125;,$&#123;var&#x2F;pattern&#x2F;pattern&#125;,$&#123;var&#x2F;&#x2F;pattern&#x2F;pattern&#125;</span><br></pre></td></tr></table></figure><ul><li>第一种模式：${var:num}，这种模式时，shell在var中提取第num个字符到末尾的所有字符。若num为正数，从左边0处开始；若num为负数，从右边开始提取字串，但必须使用在冒号后面加空格或一个数字或整个num加上括号，如${var: -2}、${var:1-3}或${var:(-2)}</li><li>第二种模式：${var:num1:num2}，num1是位置，num2是长度。表示从$var字符串的第$num1个位置开始提取长度为$num2的子串。不能为负数。</li><li>第三种模式：${var/pattern/pattern}表示将var字符串的第一个匹配的pattern替换为另一个pattern</li><li>第四种模式：${var//pattern/pattern}表示将var字符串中的所有能匹配的pattern替换为另一个pattern。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# var&#x3D;&#x2F;home&#x2F;centos</span><br><span class="line">[root@centos ~]# echo $var</span><br><span class="line">&#x2F;home&#x2F;centos</span><br><span class="line">[root@centos ~]# echo $&#123;var:5&#125;</span><br><span class="line">&#x2F;centos</span><br><span class="line">[root@centos ~]# echo $&#123;var: -6&#125;</span><br><span class="line">centos</span><br><span class="line">[root@centos ~]# echo $&#123;var:(-6)&#125;</span><br><span class="line">centos</span><br><span class="line">[root@centos ~]# echo $&#123;var:1:4&#125;</span><br><span class="line">home</span><br><span class="line">[root@centos ~]# echo $&#123;var&#x2F;o&#x2F;h&#125;</span><br><span class="line">&#x2F;hhme&#x2F;centos</span><br><span class="line">[root@centos ~]# echo $&#123;var&#x2F;&#x2F;o&#x2F;h&#125;</span><br><span class="line">&#x2F;hhme&#x2F;cenths</span><br></pre></td></tr></table></figure><h5><span id="符号后的括号">符号$后的括号</span></h5><p>（1）${a} 变量a的值, 在不引起歧义的情况下可以省略大括号。</p><p>（2）$(cmd) 命令替换，和<code>cmd</code>效果相同，结果为shell命令cmd的输，过某些Shell版本不支持$()形式的命令替换, 如tcsh。</p><p>（3）$((expression)) 和<code>exprexpression</code>效果相同, 计算数学表达式exp的数值, 其中exp只要符合C语言的运算规则即可, 甚至三目运算符和逻辑表达式都可以计算。</p><h5><span id="多条命令执行">多条命令执行()、{}</span></h5><p>（1）单小括号，(cmd1;cmd2;cmd3) 新开一个子shell顺序执行命令cmd1,cmd2,cmd3, 各命令之间用分号隔开, 最后一个命令后可以没有分号。</p><p>（2）单大括号，{ cmd1;cmd2;cmd3;} 在当前shell顺序执行命令cmd1,cmd2,cmd3, 各命令之间用分号隔开, 最后一个命令后必须有分号, 第一条命令和左括号之间必须用空格隔开。<br>对{}和()而言, 括号中的重定向符只影响该条命令， 而括号外的重定向符影响到括号中的所有命令。</p><h4><span id="命令">命令</span></h4><h5><span id="管道命令">管道命令 |</span></h5><ul><li><p>管道会将前面命令的标准输出当作后面命令的标准输入。一般程序错误时是没有标准输出的，其错误信息会送到标准错误输出。</p></li><li><p>通常shell会启动前一个程序，并通过系统调用读取它的输出，再通过系统调用启动后一个程序，通过管道向后一个程序的标准输入进行输出</p></li><li><p>出错时如何处理应该是依照各shell实现而定。bash中是后续程序仍然执行，但不会获得任何输入。所以后一个程序会执行，且你应该能在屏幕上看到前一个程序的错误输出。</p></li><li><p>另外，一般整个管道的返回状态是最后一个命令的退出状态</p></li></ul><h5><span id="选取命令-cut-grep">选取命令      cut, grep</span></h5><h5><span id="排序命令-sort-wc-uniq">排序命令      sort, wc, uniq</span></h5><h5><span id="双重数据流-tee">双重数据流    tee</span></h5><h5><span id="字符转换命令-tr-expand-col-join-paste">字符转换命令  tr, expand, col, join, paste</span></h5><h5><span id="切割命令-split">切割命令      split</span></h5><h5><span id="参数代换-xargs">参数代换      xargs</span></h5><h5><span id="文本处理-sed-awk">文本处理      sed, awk</span></h5><ol><li>sed</li></ol><ul><li>文件每行首添加内容，例如：添加双引号”<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#39;s&#x2F;^&#x2F;&quot;&amp;&#x2F;g&#39; file_name</span><br></pre></td></tr></table></figure></li><li>文件每行尾添加内容，例如：添加双引号”<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#39;s&#x2F;$&#x2F;&amp;&quot;&#x2F;g&#39; file_name</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>awk</li></ol><ul><li>去重</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#39;!a[$0]++&#123;print&#125;&#39;</span><br></pre></td></tr></table></figure><ol start="3"><li>字符串是否存在与数组中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if [[ ” $&#123;array[@]&#125; ” &#x3D;~ ” $&#123;value&#125; ” ]]; then</span><br><span class="line">    # whatever you want to do when arr contains value</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ ! ” $&#123;array[@]&#125; ” &#x3D;~ ” $&#123;value&#125; ” ]]; then</span><br><span class="line">    # whatever you want to do when arr doesn’t contain value</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li>文件或者文件夹是否存在<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if [ -d &quot;&#x2F;data&#x2F;&quot; ];then</span><br><span class="line">echo &quot;文件夹存在&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;文件夹不存在&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [ -f &quot;&#x2F;data&#x2F;filename&quot; ];then</span><br><span class="line">echo &quot;文件存在&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;文件不存在&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li>awk 切换文本为数组<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  $ echo test.txt</span><br><span class="line">    hello</span><br><span class="line">    world</span><br><span class="line">  $ local array&#x3D;&#96;cat test.txt | awk -v RS&#x3D;&#39;&#39; &#39;&#123;gsub(&quot;\n&quot;,&quot; &quot;)&#125;; print&#39;&#96;</span><br><span class="line">:wq</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;参数传递&quot;&gt;&lt;a href=&quot;#参数传递&quot; class=&quot;headerlink&quot; title=&quot;参数传递&quot;&gt;&lt;/a&gt;参数传递&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$#: 参数个数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$1: 第一个参数，2,3,4类比&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$?: 显示最后命令的退出状态，0表示没有错误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$$: 当前进程id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$*: 显示所有接收到的参数，与 $@ 作用一样, 不同点 前者把多各参数合并成了一个，后者不会&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$!：显示最后一个后台进程id&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Docker 容器网络模式简介</title>
    <link href="http://yoursite.com/2020/08/26/Docker%20%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2020/08/26/Docker%20%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/</id>
    <published>2020-08-26T07:08:34.743Z</published>
    <updated>2020-08-26T07:08:34.744Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="docker-容器网络模式简介">Docker 容器网络模式简介</span></h2><h4><span id="bridge-桥模式">Bridge 桥模式</span></h4><p>​      Docker 容器启动时默认的 网络模式，如果不使用–network 指定网络模式，那么docker会为该容器创建一个网桥，用于连接该容器网络和主机网卡设备.</p><p>​     此模式会为每一个容器分配Network Namespace、设置IP等，并将一个主机上的Docker容器连接到一个虚拟网桥上。</p><p>​     创建一个后台容器，并查看网卡信息 与 宿主机 的网桥 做对比; 明显看出 bridge 模式 下 docker 会 在docker0 网桥下创建一对 veth 设备 作为 容器与桥 的连接，270 –&gt; 271</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker run -d --name test_bridge --network=bridge busybox tail -f /dev/null</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> bridge link show</span></span><br><span class="line">271: veth3d1d764 state UP @(null): &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 master docker0 state forwarding priority 32 c</span><br><span class="line">ost 2 </span><br><span class="line"><span class="meta">#</span><span class="bash"> docker <span class="built_in">exec</span> -i test_bridge ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">270: eth0@if271: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">+----------------------------------------------------------------+-----------------------------------------+-----------------------------------------+</span><br><span class="line">|                          Host                                  |              Container 1                |              Container 2                |</span><br><span class="line">|                                                                |                                         |                                         |</span><br><span class="line">|       +------------------------------------------------+       |       +-------------------------+       |       +-------------------------+       |</span><br><span class="line">|       |             Newwork Protocol Stack             |       |       |  Newwork Protocol Stack |       |       |  Newwork Protocol Stack |       |</span><br><span class="line">|       +------------------------------------------------+       |       +-------------------------+       |       +-------------------------+       |</span><br><span class="line">|            ↑             ↑                                     |                   ↑                     |                    ↑                    |</span><br><span class="line">|............|.............|.....................................|...................|.....................|....................|....................|</span><br><span class="line">|            ↓             ↓                                     |                   ↓                     |                    ↓                    |</span><br><span class="line">|        +------+     +--------+                                 |               +-------+                 |                +-------+                |</span><br><span class="line">|        |.3.101|     |  .9.1  |                                 |               |  .9.2 |                 |                |  .9.3 |                |</span><br><span class="line">|        +------+     +--------+     +-------+                   |               +-------+                 |                +-------+                |</span><br><span class="line">|        | eth0 |     | docker0|&lt;---&gt;|  veth |                   |               | eth0  |                 |                | eth0  |                |</span><br><span class="line">|        +------+     +--------+     +-------+                   |               +-------+                 |                +-------+                |</span><br><span class="line">|            ↑             ↑             ↑                       |                   ↑                     |                    ↑                    |</span><br><span class="line">|            |             |             +-------------------------------------------+                     |                    |                    |</span><br><span class="line">|            |             ↓                                     |                                         |                    |                    |</span><br><span class="line">|            |         +-------+                                 |                                         |                    |                    |</span><br><span class="line">|            |         |  veth |                                 |                                         |                    |                    |</span><br><span class="line">|            |         +-------+                                 |                                         |                    |                    |</span><br><span class="line">|            |             ↑                                     |                                         |                    |                    |</span><br><span class="line">|            |             +-------------------------------------------------------------------------------|--------------------+                    |</span><br><span class="line">|            |                                                   |                                         |                                         |</span><br><span class="line">|            |                                                   |                                         |                                         |</span><br><span class="line">|            |                                                   |                                         |                                         |</span><br><span class="line">+------------|---------------------------------------------------+-----------------------------------------+-----------------------------------------+</span><br><span class="line">             ↓</span><br><span class="line">     Physical Network  (192.168.3.0/24)</span><br></pre></td></tr></table></figure><h4><span id="host-模式">Host 模式</span></h4><p>​    这个模式下，容器将不会获得一个独立的Network Namespace，而是和宿主机共用一个Network Namespace。容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口</p><p>​    创建一个容器，并查看ip, 信息与宿主机一致，二者公用同一个网络命名空间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i --network=host busybox ip a</span><br></pre></td></tr></table></figure><h4><span id="none-模式">None 模式</span></h4><p>​    这种模式下，Docker容器拥有自己的Network Namespace，但是，并不为Docker容器进行任何网络配置。也就是说，这个Docker容器没有网卡、IP、路由等信息。需要我们自己为Docker容器添加网卡、配置IP等。</p><p>   创建一个容器，查看该容器的 Network Namespace， 05 是上面 bridge 的， default 是docker容器本身的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name test_none --network=none busybox tail -f /dev/null</span><br><span class="line">docker inspect test_none</span><br><span class="line">...</span><br><span class="line">"NetworkSettings": &#123;</span><br><span class="line">            "Bridge": "",</span><br><span class="line">            "SandboxID": "03240dad926fe76937281421fd32703e5a7c9e0e828c6cccb18b43f5194dda1e",</span><br><span class="line">            "HairpinMode": false,</span><br><span class="line">            "LinkLocalIPv6Address": "",</span><br><span class="line">            "LinkLocalIPv6PrefixLen": 0,</span><br><span class="line">            "Ports": &#123;&#125;,</span><br><span class="line">            "SandboxKey": "/var/run/docker/netns/03240dad926f",</span><br><span class="line">...</span><br><span class="line">ls /var/run/docker/netns</span><br><span class="line">03240dad926f  0573eb6fb3e6  default</span><br></pre></td></tr></table></figure><h4><span id="container-模式">Container 模式</span></h4><p>​       这个模式下，指定新创建的容器和已经存在的一个容器共享一个Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过lo网卡设备通信。</p><p>​      使用test_bridge 容器网络，创建一个新容器，并比较二者网络信息，二者公用一块虚拟网卡都是 271</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker run -d --name test_none --network=container:test_bridge busybox tail -f /dev/null</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker <span class="built_in">exec</span> -i test_bridge ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1                                                               </span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00                                                                  </span><br><span class="line">    inet 127.0.0.1/8 scope host lo                                                                                         </span><br><span class="line">       valid_lft forever preferred_lft forever                                                                             </span><br><span class="line">270: eth0@if271: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue                                           </span><br><span class="line">    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff                                                                     </span><br><span class="line">    inet 172.17.0.3/16 brd 172.17.255.255 scope global eth0                                                                </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="meta">#</span><span class="bash"> docker <span class="built_in">exec</span> -i test_container ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1                                                               </span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00                                                                  </span><br><span class="line">    inet 127.0.0.1/8 scope host lo                                                                                         </span><br><span class="line">       valid_lft forever preferred_lft forever                                                                             </span><br><span class="line">270: eth0@if271: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue                                           </span><br><span class="line">    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff                                                                     </span><br><span class="line">    inet 172.17.0.3/16 brd 172.17.255.255 scope global eth0                                                                </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><h4><span id="user-自定义">User 自定义</span></h4><p>​   该模式下，使用docker network 命令 创建自定义的网络，处于该网络下的docker可以通过 container名称进行通信，这里不能在使用busybox作为测试imgae需要使用完整的linux系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个isolated_nw 的孤立网络，并配置子网信息</span></span><br><span class="line">docker network create -d bridge --subnet 172.25.0.0/16 isolated_nw </span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个容器，使用isolated_nw 网络，并指定ip地址</span></span><br><span class="line">docker run --network=isolated_nw --ip=172.25.3.3 -itd --name=test_user1 linkage_img</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个容器，并连接到isolated_nw</span></span><br><span class="line">docker run -itd --name test_user2 --network=isolated_nw linkage_img</span><br><span class="line">docker network connect isolated_nw test_user2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试使用 docker name 按名字通信</span></span><br><span class="line">docker exec -i test_user2 ping -w 4 test_user1</span><br><span class="line">PING test_user1 (172.25.3.3): 56 data bytes</span><br><span class="line">64 bytes from 172.25.3.3: seq=0 ttl=64 time=0.070 ms</span><br><span class="line">64 bytes from 172.25.3.3: seq=1 ttl=64 time=0.080 ms</span><br><span class="line">64 bytes from 172.25.3.3: seq=2 ttl=64 time=0.080 ms</span><br><span class="line">64 bytes from 172.25.3.3: seq=3 ttl=64 time=0.097 ms</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Docker-容器网络模式简介&quot;&gt;&lt;a href=&quot;#Docker-容器网络模式简介&quot; class=&quot;headerlink&quot; title=&quot;Docker 容器网络模式简介&quot;&gt;&lt;/a&gt;Docker 容器网络模式简介&lt;/h2&gt;&lt;h4 id=&quot;Bridge-桥模式&quot;&gt;&lt;a href=&quot;#Bridge-桥模式&quot; class=&quot;headerlink&quot; title=&quot;Bridge 桥模式&quot;&gt;&lt;/a&gt;Bridge 桥模式&lt;/h4&gt;&lt;p&gt;​      Docker 容器启动时默认的 网络模式，如果不使用–network 指定网络模式，那么docker会为该容器创建一个网桥，用于连接该容器网络和主机网卡设备.&lt;/p&gt;
&lt;p&gt;​     此模式会为每一个容器分配Network Namespace、设置IP等，并将一个主机上的Docker容器连接到一个虚拟网桥上。&lt;/p&gt;
&lt;p&gt;​     创建一个后台容器，并查看网卡信息 与 宿主机 的网桥 做对比; 明显看出 bridge 模式 下 docker 会 在docker0 网桥下创建一对 veth 设备 作为 容器与桥 的连接，270 –&amp;gt; 271&lt;/p&gt;</summary>
    
    
    
    
    <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
    <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>祝君安康</title>
    <link href="http://yoursite.com/2020/08/26/hello-world/"/>
    <id>http://yoursite.com/2020/08/26/hello-world/</id>
    <published>2020-08-26T06:59:08.822Z</published>
    <updated>2020-08-26T06:59:08.822Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to Mys!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to Mys!&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
